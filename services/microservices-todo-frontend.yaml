Description: >
    This is a Todo Frontend server
Parameters: 

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id
        
    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount: 
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    Path: 
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /todo/*

    TodoBackEndDNS:
        Description: The access to Todo backend Service
        Type: String

    AlertARN:
        Description: Arn of alert services
        Type: String

    LoadBalancerFullName:
        Description: Load Balance Name to tag event metrics
        Type: String

Resources:

    Service: 
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties: 
            Cluster: !Ref Cluster
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 50
            LoadBalancers: 
                - ContainerName: "todo-frontend"
                  ContainerPort: 3000
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: todo-frontend
            ContainerDefinitions:
                - Name: todo-frontend
                  Essential: true
                  Image: gustavoapolinario/node-todo-frontend
                  #Image: 153149144027.dkr.ecr.us-east-1.amazonaws.com/todo-frontend
                  Memory: 128
                  Environment: 
                    - Name: TODO_BACKEND
                      Value: !Ref TodoBackEndDNS
                    - Name: TODO_BACKEND_PORT
                      Value: 3001
                    - Name: PORT
                      Value: 3000
                  PortMappings:
                    - ContainerPort: 3000
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365  

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher: 
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /health_check
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
    
    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 1
            Conditions:
                - Field: path-pattern
                  Values: 
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    # This IAM Role grants the service access to register/unregister with the 
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    ServiceRole: 
        Type: AWS::IAM::Role
        Properties: 
            RoleName: !Sub ecs-service-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                        "Action": [ "sts:AssumeRole" ]
                    }]
                }
            Policies: 
                - PolicyName: !Sub ecs-service-${AWS::StackName}
                  PolicyDocument: 
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:Describe*",
                                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                    "elasticloadbalancing:Describe*",
                                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                    "elasticloadbalancing:DeregisterTargets",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:RegisterTargets"
                                ],
                                "Resource": "*"
                        }]
                    }

    AppAutoScaling:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/ecs-node-microservices/services/ecs-autoscaling.yaml
            Parameters:
                MinSize: 1
                MaxSize: 5
                ServiceName: !GetAtt Service.Name
                ClusterName: !Ref Cluster
                CPUUtilizationHighThreshold: 70
                CPUUtilizationLowThreshold: 30
                AlertARN: !Ref AlertARN
                EnvironmentName: !Ref AWS::StackName
      
    HTTPCodeELB5XXTooHighAlarm:
        Type: 'AWS::CloudWatch::Alarm'
        Properties:
            AlarmDescription: 'Application load balancer returns 5XX HTTP status codes'
            Namespace: 'AWS/ApplicationELB'
            MetricName: HTTPCode_ELB_5XX_Count
            Statistic: Sum
            Period: 60
            EvaluationPeriods: 1
            ComparisonOperator: GreaterThanThreshold
            Threshold: 0
            AlarmActions:
            - !Ref AlertARN
            Dimensions:
            - Name: LoadBalancer
              Value: !Ref LoadBalancerFullName
            - Name: TargetGroup
              Value: !GetAtt 'TargetGroup.TargetGroupFullName'
        
    HTTPCodeTarget5XXTooHighAlarm:
        Type: 'AWS::CloudWatch::Alarm'
        Properties:
            AlarmDescription: 'Application load balancer receives 5XX HTTP status codes from targets'
            Namespace: 'AWS/ApplicationELB'
            MetricName: HTTPCode_Target_5XX_Count
            Statistic: Sum
            Period: 60
            EvaluationPeriods: 1
            ComparisonOperator: GreaterThanThreshold
            Threshold: 0
            AlarmActions:
            - !Ref AlertARN
            Dimensions:
            - Name: LoadBalancer
              Value: !Ref LoadBalancerFullName
            - Name: TargetGroup
              Value: !GetAtt 'TargetGroup.TargetGroupFullName'
               
    RejectedConnectionCountTooHighAlarm:
        Type: 'AWS::CloudWatch::Alarm'
        Properties:
            AlarmDescription: 'Application load balancer rejected connections because the load balancer had reached its maximum number of connections'
            Namespace: 'AWS/ApplicationELB'
            MetricName: RejectedConnectionCount
            Statistic: Sum
            Period: 60
            EvaluationPeriods: 1
            ComparisonOperator: GreaterThanThreshold
            Threshold: 0
            AlarmActions:
            - !Ref AlertARN
            Dimensions:
            - Name: LoadBalancer
              Value: !Ref LoadBalancerFullName
            - Name: TargetGroup
              Value: !GetAtt 'TargetGroup.TargetGroupFullName'
        
    TargetConnectionErrorCountTooHighAlarm:
        Type: 'AWS::CloudWatch::Alarm'
        Properties:
            AlarmDescription: 'Application load balancer could not connect to targets'
            Namespace: 'AWS/ApplicationELB'
            MetricName: TargetConnectionErrorCount
            Statistic: Sum
            Period: 60
            EvaluationPeriods: 1
            ComparisonOperator: GreaterThanThreshold
            Threshold: 0
            AlarmActions:
            - !Ref AlertARN
            Dimensions:
            - Name: LoadBalancer
              Value: !Ref LoadBalancerFullName
            - Name: TargetGroup
              Value: !GetAtt 'TargetGroup.TargetGroupFullName'

Outputs:

    ServiceName: 
        Description: The URL endpoint for dynamodb service
        Value: !GetAtt Service.Name
