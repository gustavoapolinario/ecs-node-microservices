Description: >
    This template deploys an ECS cluster to the provided VPC and subnets 
    using an Auto Scaling Group

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType: 
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: c4.large

    DesiredCapacity:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 4

    MinSize:
        Description: How many ECS hosts is the minimal capacity
        Type: Number
        Default: 1

    MaxSize:
        Description: How many ECS hosts is the maximum capacity
        Type: Number
        Default: 4

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroups:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: List<AWS::EC2::SecurityGroup::Id>
        
    AlertARN:
        Description: ARN of alert services
        Type: String
        
    SSHKeyName:
        Description: Name of key to access
        Type: String
        Default: 'ec2-key'
        

Mappings:

    # These are the latest ECS optimized AMIs as of August 2017:
    #
    #   amzn-ami-2017.03.f-amazon-ecs-optimized
    #   ECS agent:    1.14.4
    #   Docker:       17.03.2-ce
    #   ecs-init:     1.14.4-1
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific) 

    AWSRegionToAMI:
        us-east-1:
          AMIID: ami-644a431b
        us-east-2:
          AMIID: ami-79d8e21c
        us-west-1:
          AMIID: ami-4351bc20
        us-west-2:
          AMIID: ami-f189d189
        eu-west-1:
          AMIID: ami-39d530d4
        eu-central-1:
          AMIID: ami-9fe2e074
        ap-northeast-1:
          AMIID: ami-7d0c7a90
        ap-southeast-1:
          AMIID: ami-7d0c7a90
        ap-southeast-2:
          AMIID: ami-706cca12

Resources:

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName

    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties: 
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: !Ref MinSize
            MaxSize: !Ref MaxSize
            DesiredCapacity: !Ref DesiredCapacity
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} ECS host
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal: 
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT15M
                SuspendProcesses:
                  - HealthCheck
                  - ReplaceUnhealthy
                  - AZRebalance
                  - AlarmNotification
                  - ScheduledActions
                WaitOnResourceSignals: true
        
    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
            AssociatePublicIpAddress: true
            SecurityGroups: !Ref 'SecurityGroups'
            InstanceType: !Ref 'InstanceType'
            IamInstanceProfile: !Ref 'ECSInstanceProfile'
            KeyName: !Ref 'SSHKeyName'
            UserData:
                Fn::Base64: !Sub |
                  #!/bin/bash -xe
                  echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                  yum install -y aws-cfn-bootstrap
                  /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}


    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.

    ECSRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "ec2.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken"
                            ],
                            "Resource": "*"
                        }]
                    }
    ECSInstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref ECSRole

    ScaleUpPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AdjustmentType: ChangeInCapacity
            AutoScalingGroupName: !Ref ECSAutoScalingGroup
            Cooldown: 120
            ScalingAdjustment: 1

    CPUTooHighAlarm:
        Type: 'AWS::CloudWatch::Alarm'
        Properties:
            AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
            Namespace: 'AWS/EC2'
            MetricName: CPUUtilization
            Statistic: Average
            Period: 60
            EvaluationPeriods: 5
            ComparisonOperator: GreaterThanThreshold
            Threshold: 80
            AlarmActions:
             - Ref: ScaleUpPolicy
             - Ref: AlertARN
            Dimensions:
             - Name: AutoScalingGroupName
               Value: !Ref ECSAutoScalingGroup
              
              
    ScaleDownPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AdjustmentType: ChangeInCapacity
            AutoScalingGroupName: !Ref ECSAutoScalingGroup
            Cooldown: 120
            ScalingAdjustment: -1

    CPUTooLowAlarm:
        Type: 'AWS::CloudWatch::Alarm'
        Properties:
            AlarmDescription: 'Average CPU utilization over last 10 minutes lower than 30%'
            Namespace: 'AWS/EC2'
            MetricName: CPUUtilization
            Statistic: Average
            Period: 60
            EvaluationPeriods: 5
            ComparisonOperator: LessThanThreshold
            Threshold: 30
            AlarmActions:
             - Ref: ScaleDownPolicy
             - Ref: AlertARN
            Dimensions:
            - Name: AutoScalingGroupName
              Value: !Ref ECSAutoScalingGroup
            
      
    # ContainerInstancesShortageAlarm:
        # Type: 'AWS::CloudWatch::Alarm'
        # Properties:
            # AlarmDescription: 'Cluster is running out of container instances'
            # Namespace: AWS/ECS
            # Dimensions:
            # - Name: ClusterName
              # Value: !Ref ECSCluster
            # MetricName: SchedulableContainers
            # ComparisonOperator: LessThanOrEqualToThreshold
            # Statistic: Minimum # special rule because we scale on reservations and not utilization
            # Period: 60
            # EvaluationPeriods: 5
            # Threshold: 2
            # AlarmActions:
            # - Ref: ScaleUpPolicy
            # - Ref: AlertARN

    # ContainerInstancesExcessAlarm:
        # Type: 'AWS::CloudWatch::Alarm'
        # Properties:
            # AlarmDescription: 'Cluster is wasting container instances'
            # Namespace: AWS/ECS
            # Dimensions:
            # - Name: ClusterName
              # Value: !Ref ECSCluster
            # MetricName: SchedulableContainers
            # ComparisonOperator: GreaterThanOrEqualToThreshold
            # Statistic: Maximum # special rule because we scale on reservations and not utilization
            # Period: 60
            # EvaluationPeriods: 5
            # Threshold: 10
            # AlarmActions:
            # - Ref: ScaleDownPolicy
            # - Ref: AlertARN
  
  
    CPUReservationTooHighAlarm:
        Type: 'AWS::CloudWatch::Alarm'
        Properties:
            AlarmDescription: 'Average CPU reservation over last 10 minutes higher than 90%'
            Namespace: 'AWS/ECS'
            Dimensions:
            - Name: ClusterName
              Value: !Ref ECSCluster
            MetricName: CPUReservation
            ComparisonOperator: GreaterThanThreshold
            Statistic: Average # special rule because we scale on reservations and not utilization
            Period: 60
            EvaluationPeriods: 5
            Threshold: 90
            AlarmActions:
             - Ref: ScaleUpPolicy
             - Ref: AlertARN
             
    CPUUtilizationTooHighAlarm:
        Type: 'AWS::CloudWatch::Alarm'
        Properties:
            AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
            Namespace: 'AWS/ECS'
            Dimensions:
            - Name: ClusterName
              Value: !Ref ECSCluster
            MetricName: CPUUtilization
            ComparisonOperator: GreaterThanThreshold
            Statistic: Average # special rule because we scale on reservations and not utilization
            Period: 60
            EvaluationPeriods: 5
            Threshold: 80
            AlarmActions:
             - Ref: ScaleUpPolicy
             - Ref: AlertARN

    MemoryReservationTooHighAlarm:
        Type: 'AWS::CloudWatch::Alarm'
        Properties:
            AlarmDescription: 'Average memory reservation over last 10 minutes higher than 75%'
            Namespace: 'AWS/ECS'
            Dimensions:
            - Name: ClusterName
              Value: !Ref ECSCluster
            MetricName: MemoryReservation
            ComparisonOperator: GreaterThanThreshold
            Statistic: Average # special rule because we scale on reservations and not utilization
            Period: 60
            EvaluationPeriods: 5
            Threshold: 75
            AlarmActions:
             - Ref: ScaleUpPolicy
             - Ref: AlertARN

    MemoryUtilizationTooHighAlarm:
        Type: 'AWS::CloudWatch::Alarm'
        Properties:
            AlarmDescription: 'Average memory utilization over last 10 minutes higher than 80%'
            Namespace: 'AWS/ECS'
            Dimensions:
            - Name: ClusterName
              Value: !Ref ECSCluster
            MetricName: MemoryUtilization
            ComparisonOperator: GreaterThanThreshold
            Statistic: Average
            Period: 60
            EvaluationPeriods: 5
            Threshold: 80
            AlarmActions:
             - Ref: ScaleUpPolicy
             - Ref: AlertARN

Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster
