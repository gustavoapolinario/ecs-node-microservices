Description: >
    Template example base on https://github.com/awslabs/ecs-refarch-cloudformation
    https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/quickref-ecs.html
    Author: Gustavo APolinario <gustavo.guss@gmail.com>

Parameters:
  Email:
    Description: 'Optional email address that will receive alerts'
    Type: String
    Default: ''

Resources:

    VPC:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/ecs-node-microservices/infrastructure/vpc.yaml
            Parameters:
                EnvironmentName:    !Ref AWS::StackName
                VpcCIDR:            10.180.0.0/16
                PublicSubnet1CIDR:  10.180.8.0/21
                PublicSubnet2CIDR:  10.180.16.0/21
                PrivateSubnet1CIDR: 10.180.24.0/21
                PrivateSubnet2CIDR: 10.180.32.0/21

    SecurityGroups:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/ecs-node-microservices/infrastructure/security-groups.yaml
            Parameters: 
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC

    Alerts:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/ecs-node-microservices/infrastructure/alerts.yaml
            Parameters:
                Email: !Ref Email

    # Bastion:
    #     Type: AWS::CloudFormation::Stack
    #     Properties:
    #         TemplateURL: https://s3.amazonaws.com/ecs-node-microservices/infrastructure/bastion-server.yaml
    #         Parameters:
    #             VPCID: !GetAtt VPC.Outputs.VPC
    #             Subnets: !GetAtt VPC.Outputs.PublicSubnets
    #             RemoteAccessCIDR: 187.22.77.33
    #             KeyPairName: 'ec2-key'
    #             BastionInstanceType: 't2.micro'
    #             NumBastionHosts: 1

    ALB:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/ecs-node-microservices/infrastructure/load-balancers.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC
                Subnets: !GetAtt VPC.Outputs.PublicSubnets
                SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup
    
    Mongodb:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/ecs-node-microservices/services/ec2-mongodb.yaml
            Parameters: 
                VPC: !GetAtt VPC.Outputs.VPC
                ClusterReplicaSetCount: 1
                BastionSecurityGroupID: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
                KeyPairName: "ec2-key"
                MongoDBAdminUsername: "admin"
                MongoDBAdminPassword: "adminadmin"
                NodeInstanceType: "m5.large"
                PrimaryNodeSubnet: !GetAtt VPC.Outputs.PublicSubnet1
                Secondary0NodeSubnet: !GetAtt VPC.Outputs.PublicSubnet1
                Secondary1NodeSubnet: !GetAtt VPC.Outputs.PublicSubnet2

    ECS:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/ecs-node-microservices/infrastructure/ecs-cluster.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                InstanceType: t2.large
                DesiredCapacity: 2
                MinSize: 2
                MaxSize: 5
                VPC: !GetAtt VPC.Outputs.VPC
                SecurityGroups: !Join [ ",", [ !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup, !GetAtt Mongodb.Outputs.MongoDBServerAccessSecurityGroup ]]
                Subnets: !GetAtt VPC.Outputs.PublicSubnets
                AlertARN: !GetAtt Alerts.Outputs.TopicARN


    StaticService:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/ecs-node-microservices/services/microservices-static.yaml
            Parameters:
                VPC: !GetAtt VPC.Outputs.VPC
                Cluster: !GetAtt ECS.Outputs.Cluster
                DesiredCount: 2
                Listener: !GetAtt ALB.Outputs.Listener 
                Path: /static/*
                LoadBalancerFullName: !GetAtt ALB.Outputs.LoadBalancerFullName
                AlertARN: !GetAtt Alerts.Outputs.TopicARN

    ALBTodoBackEnd:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/ecs-node-microservices/infrastructure/load-balancers.yaml
            Parameters:
                EnvironmentName: "alb-todo-backend"
                VPC: !GetAtt VPC.Outputs.VPC
                Subnets: !GetAtt VPC.Outputs.PublicSubnets
                SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup
                CreateDefaultTargetGroup: false
                IsInternal: true
                CreateDefaultTargetGroup: false            

    TodoBackEnd:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/ecs-node-microservices/services/microservices-todo-backend.yaml
            Parameters:
                VPC: !GetAtt VPC.Outputs.VPC
                Cluster: !GetAtt ECS.Outputs.Cluster
                DesiredCount: 2
                LoadBalancer: !GetAtt ALBTodoBackEnd.Outputs.LoadBalancer
                MONGODB: !GetAtt Mongodb.Outputs.PrimaryReplicaNodeIp
                LoadBalancerFullName: !GetAtt ALBTodoBackEnd.Outputs.LoadBalancerFullName
                AlertARN: !GetAtt Alerts.Outputs.TopicARN

    TodoFrontEnd:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/ecs-node-microservices/services/microservices-todo-frontend.yaml
            Parameters:
                VPC: !GetAtt VPC.Outputs.VPC
                Cluster: !GetAtt ECS.Outputs.Cluster
                DesiredCount: 2
                Listener: !GetAtt ALB.Outputs.Listener
                Path: /todo/*
                TodoBackEndDNS: !GetAtt ALBTodoBackEnd.Outputs.LoadBalancerUrl
                LoadBalancerFullName: !GetAtt ALB.Outputs.LoadBalancerFullName
                AlertARN: !GetAtt Alerts.Outputs.TopicARN

    # TodoFrontEndPipeline:
    #     Type: AWS::CloudFormation::Stack
    #     Properties:
    #         TemplateURL: https://s3.amazonaws.com/ecs-node-microservices/automations/aws-codepipeline.yaml
    #         Parameters:
    #               RepositoryName: node-todo-frontend
    #               BranchName: master
    #               ECSCluster: !GetAtt ECS.Outputs.Cluster
    #               ECSService: !GetAtt TodoFrontEnd.Outputs.ServiceName



Outputs:

    TodoFrontEndUrl: 
        Description: The URL endpoint for the todo service
        Value: !Join [ "", [!Join [ "/", [ !GetAtt ALB.Outputs.LoadBalancerUrl, "todo" ]], "/"]]

    StaticServiceUrl: 
        Description: The URL endpoint for the static service
        Value: !Join [ "", [!Join [ "/", [ !GetAtt ALB.Outputs.LoadBalancerUrl, "static" ]], "/"]]

    WebsiteServiceUrl: 
        Description: The URL endpoint for the website service
        Value: !Join ["", [ !GetAtt ALB.Outputs.LoadBalancerUrl, "/" ]]
